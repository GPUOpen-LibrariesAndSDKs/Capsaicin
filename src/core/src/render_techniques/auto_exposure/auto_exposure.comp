/**********************************************************************
Copyright (c) 2024 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
********************************************************************/

#include "math/color.hlsl"

uint2 g_BufferDimensions;

RWTexture2D<float4> g_InputBuffer;

float g_FrameTime;
float g_ExposureBias;

RWStructuredBuffer<uint> g_Histogram; // Must be cleared to 0 on creation/scene change etc.
RWStructuredBuffer<float> g_KeySceneLuminance;
RWStructuredBuffer<float> g_Exposure;

#define HDR_MAX 50.0f

#define HISTOGRAM_GROUP_SIZE 16
#define HISTOGRAM_SIZE 128
groupshared uint lds_Histogram[HISTOGRAM_SIZE];

[numthreads(HISTOGRAM_GROUP_SIZE, HISTOGRAM_GROUP_SIZE, 1)]
void CalculateHistogram(uint2 did : SV_DispatchThreadID, uint gtid : SV_GroupIndex)
{
    // Initialize the local histogram data
    lds_Histogram[gtid] = 0;
    GroupMemoryBarrierWithGroupSync();

    if (all(did < g_BufferDimensions))
    {
        float3 colour = g_InputBuffer[did].xyz;

        float lum = luminance(colour);

        // Convert to log luminance and scale it to [0, 1] based on our min and max HDR range (min is set to 0)
        const float maxHDR = log2(HDR_MAX);
        const float minHDR = log2(FLT_MIN);
        const float rangeHDR = maxHDR - minHDR;
        float logLuminance = (lum > FLT_MIN) ? saturate((log2(lum) - minHDR) / rangeHDR) : 0.0f;

        // Convert to [1, HISTOGRAM_SIZE] range where 0 stores all zero value pixels
        uint binIndex = (lum > FLT_MIN) ? uint(logLuminance * float(HISTOGRAM_SIZE - 1) + 1.0f) : 0.0f;

        // Add to the corresponding local histogram bucket
        const uint minWaveHistogram = min(WaveGetLaneCount(), HISTOGRAM_SIZE);
        // Generate bitmask with 1 bit for every active thread in the wave (should be optimised out by compiler)
        uint4 laneMask = uint4(-1L >> (32 - min(minWaveHistogram, 32)),
            minWaveHistogram > 32 ? -1L >> (32 - min(minWaveHistogram - 32, 32)) : 0,
            minWaveHistogram > 64 ? -1L >> (32 - min(minWaveHistogram - 64, 32)) : 0,
            minWaveHistogram > 96 ? -1L >> (32 - min(minWaveHistogram - 96, 32)) : 0);
        // To avoid multiple threads in a wave writing to the same location we use a ballot to determine which threads want
        //   to write to each bin and the corresponding thread count. Then only the first thread for each output location writes
        //   the total count for that bin.
        for (uint i = 0; i < log2(HISTOGRAM_SIZE) + 1; ++i)
        {
            uint laneBit = (binIndex >> i) & 0x1;
            uint4 ballot = WaveActiveBallot(laneBit);
            laneMask &= laneBit != 0 ? ballot : ~ballot;
        }
        // Lane mask should now hold a 1 bit for evey thread in the warp that wants to write to the same bin index as the current thread
        uint selectedLane = laneMask.x != 0 ? firstbitlow(laneMask.x) : (laneMask.y != 0 ? firstbitlow(laneMask.y) + 32 : (laneMask.z != 0 ? firstbitlow(laneMask.z) + 64 : firstbitlow(laneMask.w) + 96));
        if (WaveGetLaneIndex() == selectedLane)
        {
            uint matchCount = countbits(laneMask.x) + countbits(laneMask.y) + countbits(laneMask.z) + countbits(laneMask.w);
            InterlockedAdd(lds_Histogram[binIndex], matchCount);
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (gtid >= HISTOGRAM_SIZE || lds_Histogram[gtid] == 0)
    {
        return;
    }

    // Write out the local histogram values into global memory
    InterlockedAdd(g_Histogram[gtid], lds_Histogram[gtid]);
}

[numthreads(HISTOGRAM_SIZE, 1, 1)]
void CalculateExposure(uint gtid : SV_GroupIndex)
{
    // We calculate the exposure by getting the key scene luminance value from a pre-calculated histogram of the scenes luminance (log2 space)

    // Get the corresponding value from the global histogram
    uint histogramValue = g_Histogram[gtid];
    uint value = histogramValue * gtid; // weighted contribution

    // Reset global histogram for next frame
    g_Histogram[gtid] = 0;

    // Combine values across the wave
    value = WaveActiveSum(value);

    // Combine values across the group
    for (uint j = WaveGetLaneCount(); j < HISTOGRAM_SIZE; j *= WaveGetLaneCount())
    {
        // Use local data share to combine across waves
        if (WaveIsFirstLane())
        {
            const uint waveID = gtid / WaveGetLaneCount();
            lds_Histogram[waveID] = value;
        }
        GroupMemoryBarrierWithGroupSync();

        const uint waveCount = HISTOGRAM_SIZE / WaveGetLaneCount();
        if (gtid >= waveCount)
        {
            break;
        }

        // Use the current wave to combine across group
        value = lds_Histogram[gtid];
        value = WaveActiveSum(value);
    }

    if (gtid != 0)
    {
        return;
    }

    // Calculate weighted sum based on number of non-zero luminance pixels
    //  Since this is only run on thread 0 then 'histogramValue' will contain the pixels
    //  mapped to bucket 0 which contain the non-contributing pixels
    float numPixels = float(g_BufferDimensions.x * g_BufferDimensions.y);
    float weightedAverage = (value / max(numPixels - (float)histogramValue, 1.0)) - 1.0f;

    // Convert back from histogram value to luminance
    const float maxHDR = log2(HDR_MAX);
    const float minHDR = log2(FLT_MIN);
    const float rangeHDR = maxHDR - minHDR;
    float weightedAverageLuminance = exp2((weightedAverage / float(HISTOGRAM_SIZE - 1)) * rangeHDR + minHDR);

    float ya;
    if (g_FrameTime > 0.0f)
    {
        // Apply adaptation to key scene luminance
        float oldYa = g_KeySceneLuminance[0];
        ya = oldYa + (weightedAverageLuminance - oldYa) * (1.0f - exp(-1.0f * g_FrameTime * 2.5f));
    }
    else
    {
        // If first frame then just store value
        ya = weightedAverageLuminance;
    }
    g_KeySceneLuminance[0] = ya;

    // Calculate middle-grey using an exposure compensation curve
    // "Perceptual Effects in Real-time Tone Mapping" - Krawczyk et al
    float dg = 1.03f - (2.0f / (2.0f + log10(ya + 1.0f)));

    // Calculate final exposure
    float exposure = dg / ya;
    exposure *= g_ExposureBias;
    g_Exposure[0] = min(exposure, 500.0f);
}
